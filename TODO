
Current backend functionality:

1. Provides two API endpoints:
   - GET /api/weather/historical: Fetches historical weather data for a specific location and date range
   - POST /api/weather/processed: Handles more complex weather data requests with parameters

2. Key features:
   - Splits large date ranges into smaller chunks (max 365 days) to comply with API limits
   - Makes parallel API requests for each time chunk to improve performance
   - Supports multiple weather parameters (temperature max/min, humidity)
   - Maps frontend parameter names to API parameter names
   - Merges results from multiple API calls into a single response
   - Includes error handling and logging

3. Uses external weather API:
   - Connects to Open-Meteo Archive API (archive-api.open-meteo.com)
   - Fetches daily weather metrics
   - Handles API responses and deserializes JSON data

4. Has placeholder methods for future features:
   - Database integration for caching weather data
   - Data formatting capabilities


What needs to be done: 
    - Format the return data so that front end can use it.
    - Work create api calles on the front end side to request the data.
    - Add mapping for locations either on frontend or backend so that the latitude and longitude can be switched to cities


What else can we do? 
    We could save all the data in the database which is fetched from the API to 
        -> this would semi complicated logic to check what data is stored in the db, 
        and what still needs to be fetched
        -> change so that the resposponse is from the db at the end and not from the api
        -> We could do parallel thread database queries to see what needs to be fethced and stored



